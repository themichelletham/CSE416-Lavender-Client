{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\geord\\\\Documents\\\\GitHub\\\\CSE416-Lavender-Client\\\\src\\\\components\\\\Questions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, forwardRef, useRef, useImperativeHandle } from 'react';\nimport { makeStyles, styled } from '@material-ui/core/styles';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/HighlightOff';\nimport { Box, Button, FormControl, InputBase, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Answers from \"./Answers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  box: {\n    backgroundColor: \"#F9F9FF\"\n  },\n  questionWrapper: {\n    fontSize: 22,\n    paddingBottom: 10,\n    paddingLeft: 10\n  },\n  questionText: {\n    textAlign: 'left',\n    marginTop: 10,\n    width: '50vw',\n    backgroundColor: \"#FFFFFF\"\n  },\n  toolbar: theme.mixins.toolbar\n}));\n\nfunction Questions(props, ref) {\n  _s();\n\n  const classes = useStyles();\n  const answersRef = useRef();\n  const [questions, setQuestions] = useState([]);\n  const [question, setQuestionText] = useState({\n    question_text: ''\n  });\n  useImperativeHandle(ref, () => ({\n    getQuestions() {\n      return questions;\n    }\n\n  })); //cretes new textbox\n\n  const addQuestion = e => {\n    let currentquestions = [...questions];\n    let newquestion = \"New question\";\n    currentquestions.push(newquestion);\n    setQuestions(currentquestions);\n  };\n\n  const removeQuestion = index => e => {\n    let currentquestions = [...questions];\n    currentquestions.splice(index, 1);\n    setQuestions(currentquestions);\n  }; //updates list of questions\n\n\n  const onQuestionTextChange = index => e => {\n    let tempQuestions = [...questions];\n    setQuestionText({ ...question.question_text,\n      question_text: e.target.value\n    });\n    tempQuestions[index] = e.target.value;\n    setQuestions(tempQuestions);\n  };\n\n  const deleteStyle = {\n    backgroundColor: '#8A8AEE',\n    marginLeft: 10,\n    marginBottom: 10,\n    color: 'black',\n    borderRadius: 20\n  };\n  const addStyle = {\n    backgroundColor: '#8A8AEE',\n    left: \"8%\",\n    marginBottom: 10,\n    color: 'black',\n    width: \"50vw\",\n    borderRadius: 20\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: classes.box,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.toolbar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), questions.map((question, index) => {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.questionWrapper,\n        children: [index + 1, \". \", /*#__PURE__*/_jsxDEV(TextField, {\n          className: classes.questionText,\n          value: questions[index],\n          onChange: onQuestionTextChange(index),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              variant: \"contained\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: removeAnswer(index),\n                children: /*#__PURE__*/_jsxDEV(DeleteIcon, {\n                  disableElevation: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 22\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)\n          },\n          inputProps: {\n            style: {\n              padding: 5,\n              fontSize: 20\n            }\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          style: deleteStyle,\n          variant: \"contained\",\n          onClick: removeQuestion(index),\n          disableElevation: true,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Answers, {\n          ref: (props, answersRef),\n          disableElevation: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.toolbar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.toolbar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      style: addStyle,\n      variant: \"contained\",\n      onClick: addQuestion,\n      disableElevation: true,\n      children: \"+ Add question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Questions, \"2Qss/xIPJhHZBxQJqfM8ms6khFE=\", false, function () {\n  return [useStyles, useImperativeHandle];\n});\n\n_c = Questions;\nexport default _c2 = /*#__PURE__*/forwardRef(Questions);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Questions\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/geord/Documents/GitHub/CSE416-Lavender-Client/src/components/Questions.js"],"names":["React","useState","useEffect","forwardRef","useRef","useImperativeHandle","makeStyles","styled","EditIcon","DeleteIcon","Box","Button","FormControl","InputBase","TextField","IconButton","InputAdornment","useHistory","useLocation","Answers","useStyles","theme","box","backgroundColor","questionWrapper","fontSize","paddingBottom","paddingLeft","questionText","textAlign","marginTop","width","toolbar","mixins","Questions","props","ref","classes","answersRef","questions","setQuestions","question","setQuestionText","question_text","getQuestions","addQuestion","e","currentquestions","newquestion","push","removeQuestion","index","splice","onQuestionTextChange","tempQuestions","target","value","deleteStyle","marginLeft","marginBottom","color","borderRadius","addStyle","left","map","endAdornment","removeAnswer","style","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, forwardRef, useRef, useImperativeHandle } from 'react'\r\nimport { makeStyles, styled } from '@material-ui/core/styles';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/HighlightOff';\r\nimport { Box, Button, FormControl, InputBase, TextField, IconButton, InputAdornment} from '@mui/material'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport Answers from \"./Answers\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    backgroundColor: \"#F9F9FF\",\r\n  },\r\n  questionWrapper: {\r\n    fontSize: 22,\r\n    paddingBottom: 10,\r\n    paddingLeft: 10,\r\n  },\r\n  questionText: {\r\n    textAlign: 'left',  \r\n    marginTop:10,\r\n    width: '50vw',\r\n    backgroundColor: \"#FFFFFF\",\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n}));\r\n\r\nfunction Questions(props, ref) {\r\n  const classes = useStyles();\r\n  const answersRef = useRef();\r\n\r\n  const [questions, setQuestions] = useState([]);\r\n  const [question, setQuestionText] = useState({\r\n    question_text: '',\r\n  })\r\n\r\n  useImperativeHandle( ref, () => ({\r\n    getQuestions() {\r\n      return questions;\r\n    }\r\n  }));\r\n  \r\n    //cretes new textbox\r\n  const addQuestion = (e) => {\r\n    let currentquestions = [...questions]\r\n    let newquestion = \"New question\";\r\n    currentquestions.push(newquestion);\r\n    setQuestions(currentquestions);\r\n  }\r\n\r\n  const removeQuestion = index => e => {\r\n    let currentquestions = [...questions]\r\n    currentquestions.splice(index,1)\r\n    setQuestions(currentquestions);\r\n  }\r\n\r\n    //updates list of questions\r\n    const onQuestionTextChange = index => e => {\r\n      let tempQuestions = [...questions];\r\n      setQuestionText({...question.question_text, question_text:e.target.value});\r\n      tempQuestions[index] = e.target.value;\r\n      setQuestions(tempQuestions);\r\n    }\r\n\r\n    const deleteStyle = {\r\n      backgroundColor: '#8A8AEE',\r\n      marginLeft: 10,\r\n      marginBottom: 10,\r\n      color: 'black',\r\n      borderRadius: 20\r\n    }\r\n\r\n    const addStyle = {\r\n      backgroundColor: '#8A8AEE',\r\n      left: \"8%\",\r\n      marginBottom: 10,\r\n      color: 'black',\r\n      width: \"50vw\",\r\n      borderRadius: 20\r\n    }\r\n      \r\n    return(\r\n      <Box className={classes.box}>\r\n      <div className={classes.toolbar} />\r\n      { questions.map((question, index) =>{\r\n          return (\r\n          <Box className={classes.questionWrapper} key={index}> \r\n          {index+1}. <TextField className={classes.questionText}\r\n            key={index}\r\n            value={questions[index]}\r\n            onChange={onQuestionTextChange(index)}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"end\" variant='contained'>\r\n                  <IconButton onClick={removeAnswer(index)}>\r\n                     <DeleteIcon disableElevation/>\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              )\r\n            }}\r\n            inputProps={{\r\n              style: {\r\n                padding: 5,\r\n                fontSize: 20,\r\n              }\r\n            }}\r\n          />\r\n            <Button style={deleteStyle} variant='contained' onClick={removeQuestion(index)} disableElevation>X</Button>\r\n            <Answers ref={props, answersRef} disableElevation/>  \r\n            <div className={classes.toolbar} />   \r\n          </Box>\r\n          );\r\n        })}\r\n        <div className={classes.toolbar} />\r\n        <Button style={addStyle} variant='contained' onClick={addQuestion} disableElevation>+ Add question</Button>\r\n      </Box>\r\n    );\r\n}\r\n\r\nexport default forwardRef(Questions);"]},"metadata":{},"sourceType":"module"}