{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\geord\\\\Documents\\\\GitHub\\\\CSE416-Lavender-Client\\\\src\\\\components\\\\Questions.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, forwardRef, useRef, useImperativeHandle } from 'react';\nimport { makeStyles, styled } from '@material-ui/core/styles';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/HighlightOff';\nimport { Box, Button, FormControl, InputBase, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Questions(props, ref) {\n  _s();\n\n  const questionStyle = {\n    backgroundColor: '#ACACE1',\n    marginBottom: 10,\n    color: 'black'\n  };\n  const [questions, setQuestions] = useState([]);\n  const [question, setQuestionText] = useState({\n    question_text: ''\n  });\n  useImperativeHandle(ref, () => ({\n    getQuestions() {\n      return questions;\n    }\n\n  })); //cretes new textbox\n\n  const addQuestion = e => {\n    let currentquestions = [...questions];\n    let newquestion = \"New question\";\n    currentquestions.push(newquestion);\n    setQuestions(currentquestions);\n  };\n\n  const removeQuestion = index => e => {\n    let currentquestions = [...questions];\n    currentquestions.splice(index, 1);\n    setQuestions(currentquestions);\n  }; //updates list of questions\n\n\n  const onQuestionTextChange = index => e => {\n    let tempQuestions = [...questions];\n    setQuestionText({ ...question.question_text,\n      question_text: e.target.value\n    });\n    tempQuestions[index] = e.target.value;\n    setQuestions(tempQuestions);\n  };\n\n  return (\n    /*#__PURE__*/\n    //<Box sx={{ display: 'flex', flexDirection: 'column', flexGrow: 1, justifyContent: 'start' }}>\n    _jsxDEV(Box, {\n      children: [questions.map((question, index) => {\n        return /*#__PURE__*/_jsxDEV(Box, {\n          children: [index, \". \", /*#__PURE__*/_jsxDEV(TextField, {\n            inputProps: {\n              min: 0,\n              style: {\n                textAlign: 'center',\n                fontSize: 22,\n                paddingTop: 0,\n                paddingBottom: 0,\n                marginTop: 10\n              }\n            },\n            value: questions[index],\n            onChange: onQuestionTextChange(index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: removeQuestion(index),\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        style: questionStyle,\n        onClick: addQuestion,\n        children: \"Add question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) // </Box>\n\n  );\n}\n\n_s(Questions, \"JwEeDHE9rpXqIq9hqfRAyn/IDF0=\", false, function () {\n  return [useImperativeHandle];\n});\n\n_c = Questions;\nexport default _c2 = /*#__PURE__*/forwardRef(Questions);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Questions\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/geord/Documents/GitHub/CSE416-Lavender-Client/src/components/Questions.js"],"names":["React","useState","useEffect","forwardRef","useRef","useImperativeHandle","makeStyles","styled","EditIcon","DeleteIcon","Box","Button","FormControl","InputBase","TextField","IconButton","InputAdornment","useHistory","useLocation","Questions","props","ref","questionStyle","backgroundColor","marginBottom","color","questions","setQuestions","question","setQuestionText","question_text","getQuestions","addQuestion","e","currentquestions","newquestion","push","removeQuestion","index","splice","onQuestionTextChange","tempQuestions","target","value","map","min","style","textAlign","fontSize","paddingTop","paddingBottom","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, forwardRef, useRef, useImperativeHandle } from 'react'\r\nimport { makeStyles, styled } from '@material-ui/core/styles';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/HighlightOff';\r\nimport { Box, Button, FormControl, InputBase, TextField, IconButton, InputAdornment} from '@mui/material'\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\nfunction Questions(props, ref) {\r\n  \r\n\r\n    const questionStyle = {\r\n        backgroundColor: '#ACACE1',\r\n        marginBottom: 10,\r\n        color: 'black'\r\n        \r\n      }\r\n      \r\n    const [questions, setQuestions] = useState([]);\r\n\r\n    const [question, setQuestionText] = useState({\r\n        question_text: '',\r\n    })\r\n\r\n    useImperativeHandle( ref, () => ({\r\n        getQuestions() {\r\n          return questions;\r\n        }\r\n      }));\r\n    //cretes new textbox\r\n    const addQuestion = (e) => {\r\n        let currentquestions = [...questions]\r\n        let newquestion = \"New question\";\r\n        currentquestions.push(newquestion);\r\n        setQuestions(currentquestions);\r\n    }\r\n    const removeQuestion = index => e => {\r\n      let currentquestions = [...questions]\r\n      currentquestions.splice(index,1)\r\n      setQuestions(currentquestions);\r\n  }\r\n\r\n    //updates list of questions\r\n    const onQuestionTextChange = index => e => {\r\n      let tempQuestions = [...questions];\r\n      setQuestionText({...question.question_text, question_text:e.target.value});\r\n      tempQuestions[index] = e.target.value;\r\n      setQuestions(tempQuestions);\r\n      }\r\n      \r\n    return(\r\n        //<Box sx={{ display: 'flex', flexDirection: 'column', flexGrow: 1, justifyContent: 'start' }}>\r\n        <Box>\r\n        {\r\n            questions.map((question, index) =>{\r\n              return (\r\n              <Box key={index}> \r\n              {index}. <TextField\r\n                inputProps={{min: 0, \r\n                    style: { textAlign: 'center', fontSize: 22, paddingTop:0, paddingBottom:0,\r\n                    marginTop:10}}}\r\n                    key={index}\r\n                value={questions[index]}\r\n                onChange={onQuestionTextChange(index)}\r\n                />\r\n                <Button variant='contained' onClick={removeQuestion(index)}>X</Button>\r\n                </Box>);\r\n            })}\r\n      \r\n\r\n        <Button variant='contained' style={questionStyle} onClick={addQuestion} >Add question</Button>\r\n        \r\n        </Box>\r\n       // </Box>\r\n    );\r\n}\r\n\r\nexport default forwardRef(Questions);"]},"metadata":{},"sourceType":"module"}