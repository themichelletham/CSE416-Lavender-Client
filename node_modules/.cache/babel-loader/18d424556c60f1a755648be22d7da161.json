{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _Input, _FilledInput;\n\nconst _excluded = [\"autoWidth\", \"children\", \"classes\", \"className\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"],\n      _excluded2 = [\"root\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\nimport SelectInput from './SelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\nimport FilledInput from '../FilledInput';\nimport OutlinedInput from '../OutlinedInput';\nimport useThemeProps from '../styles/useThemeProps';\nimport useForkRef from '../utils/useForkRef';\nimport { getSelectUtilityClasses } from './selectClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getSelectUtilityClasses, classes);\n};\n\nconst Select = /*#__PURE__*/React.forwardRef(function Select(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSelect',\n    props: inProps\n  });\n\n  const {\n    autoWidth = false,\n    children,\n    classes: classesProp = {},\n    className,\n    displayEmpty = false,\n    IconComponent = ArrowDropDownIcon,\n    id,\n    input,\n    inputProps,\n    label,\n    labelId,\n    MenuProps,\n    multiple = false,\n    native = false,\n    onClose,\n    onOpen,\n    open,\n    renderValue,\n    SelectDisplayProps,\n    variant: variantProps = 'outlined'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const inputComponent = native ? NativeSelectInput : SelectInput;\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  const variant = fcs.variant || variantProps;\n  const InputComponent = input || {\n    standard: _Input || (_Input = /*#__PURE__*/_jsx(Input, {})),\n    outlined: /*#__PURE__*/_jsx(OutlinedInput, {\n      label: label\n    }),\n    filled: _FilledInput || (_FilledInput = /*#__PURE__*/_jsx(FilledInput, {}))\n  }[variant];\n\n  const ownerState = _extends({}, props, {\n    classes: classesProp\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\n\n  const inputComponentRef = useForkRef(ref, InputComponent.ref);\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\n    // Most of the logic is implemented in `SelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent,\n    inputProps: _extends({\n      children,\n      IconComponent,\n      variant,\n      type: undefined,\n      // We render a select. We can ignore the type provided by the `Input`.\n      multiple\n    }, native ? {\n      id\n    } : {\n      autoWidth,\n      displayEmpty,\n      labelId,\n      MenuProps,\n      onClose,\n      onOpen,\n      open,\n      renderValue,\n      SelectDisplayProps: _extends({\n        id\n      }, SelectDisplayProps)\n    }, inputProps, {\n      classes: inputProps ? deepmerge(otherClasses, inputProps.classes) : otherClasses\n    }, input ? input.props.inputProps : {})\n  }, multiple && native && variant === 'outlined' ? {\n    notched: true\n  } : {}, {\n    ref: inputComponentRef,\n    className: clsx(classes.root, InputComponent.props.className, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * If `true`, the width of the popover will automatically be set according to the items inside the\r\n   * menu, otherwise it will be at least the width of the select input.\r\n   * @default false\r\n   */\n  autoWidth: PropTypes.bool,\n\n  /**\r\n   * The option elements to populate the select with.\r\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\r\n   *\r\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * @default {}\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   */\n  defaultValue: PropTypes.any,\n\n  /**\r\n   * If `true`, a value is displayed even if no items are selected.\r\n   *\r\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\r\n   * returns the value to be displayed when no items are selected.\r\n   *\r\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\r\n   * The label should either be hidden or forced to a shrunk state.\r\n   * @default false\r\n   */\n  displayEmpty: PropTypes.bool,\n\n  /**\r\n   * The icon that displays the arrow.\r\n   * @default ArrowDropDownIcon\r\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\r\n   * The `id` of the wrapper element or the `select` element when `native`.\r\n   */\n  id: PropTypes.string,\n\n  /**\r\n   * An `Input` element; does not have to be a material-ui specific `Input`.\r\n   */\n  input: PropTypes.element,\n\n  /**\r\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\r\n   * When `native` is `true`, the attributes are applied on the `select` element.\r\n   */\n  inputProps: PropTypes.object,\n\n  /**\r\n   * See [OutlinedInput#label](/api/outlined-input/#props)\r\n   */\n  label: PropTypes.node,\n\n  /**\r\n   * The ID of an element that acts as an additional label. The Select will\r\n   * be labelled by the additional label and the selected value.\r\n   */\n  labelId: PropTypes.string,\n\n  /**\r\n   * Props applied to the [`Menu`](/api/menu/) element.\r\n   */\n  MenuProps: PropTypes.object,\n\n  /**\r\n   * If `true`, `value` must be an array and the menu will support multiple selections.\r\n   * @default false\r\n   */\n  multiple: PropTypes.bool,\n\n  /**\r\n   * If `true`, the component uses a native `select` element.\r\n   * @default false\r\n   */\n  native: PropTypes.bool,\n\n  /**\r\n   * Callback fired when a menu item is selected.\r\n   *\r\n   * @param {SelectChangeEvent<T>} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value` (any).\r\n   * **Warning**: This is a generic event not a change event unless the change event is caused by browser autofill.\r\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the component requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   */\n  onClose: PropTypes.func,\n\n  /**\r\n   * Callback fired when the component requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   */\n  onOpen: PropTypes.func,\n\n  /**\r\n   * If `true`, the component is shown.\r\n   * You can only use it when the `native` prop is `false` (default).\r\n   */\n  open: PropTypes.bool,\n\n  /**\r\n   * Render the selected value.\r\n   * You can only use it when the `native` prop is `false` (default).\r\n   *\r\n   * @param {any} value The `value` provided to the component.\r\n   * @returns {ReactNode}\r\n   */\n  renderValue: PropTypes.func,\n\n  /**\r\n   * Props applied to the clickable div element.\r\n   */\n  SelectDisplayProps: PropTypes.object,\n\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\n  sx: PropTypes.object,\n\n  /**\r\n   * The `input` value. Providing an empty string will select no options.\r\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\r\n   *\r\n   * If the value is an object it must have reference equality with the option in order to be selected.\r\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\r\n   */\n  value: PropTypes.any,\n\n  /**\r\n   * The variant to use.\r\n   * @default 'outlined'\r\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nSelect.muiName = 'Select';\nexport default Select;","map":{"version":3,"sources":["C:/Users/geord/Documents/GitHub/CSE416-Lavender-Client/node_modules/@mui/material/Select/Select.js"],"names":["_extends","_objectWithoutPropertiesLoose","_Input","_FilledInput","_excluded","_excluded2","React","PropTypes","clsx","deepmerge","unstable_composeClasses","composeClasses","SelectInput","formControlState","useFormControl","ArrowDropDownIcon","Input","NativeSelectInput","FilledInput","OutlinedInput","useThemeProps","useForkRef","getSelectUtilityClasses","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","Select","forwardRef","inProps","ref","props","name","autoWidth","children","classesProp","className","displayEmpty","IconComponent","id","input","inputProps","label","labelId","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant","variantProps","other","inputComponent","muiFormControl","fcs","states","InputComponent","standard","outlined","filled","otherClasses","inputComponentRef","cloneElement","type","undefined","notched","process","env","NODE_ENV","propTypes","bool","node","object","string","defaultValue","any","elementType","element","onChange","func","sx","value","oneOf","muiName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\n\r\nvar _Input, _FilledInput;\r\n\r\nconst _excluded = [\"autoWidth\", \"children\", \"classes\", \"className\", \"displayEmpty\", \"IconComponent\", \"id\", \"input\", \"inputProps\", \"label\", \"labelId\", \"MenuProps\", \"multiple\", \"native\", \"onClose\", \"onOpen\", \"open\", \"renderValue\", \"SelectDisplayProps\", \"variant\"],\r\n      _excluded2 = [\"root\"];\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { deepmerge } from '@mui/utils';\r\nimport { unstable_composeClasses as composeClasses } from '@mui/core';\r\nimport SelectInput from './SelectInput';\r\nimport formControlState from '../FormControl/formControlState';\r\nimport useFormControl from '../FormControl/useFormControl';\r\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\r\nimport Input from '../Input';\r\nimport NativeSelectInput from '../NativeSelect/NativeSelectInput';\r\nimport FilledInput from '../FilledInput';\r\nimport OutlinedInput from '../OutlinedInput';\r\nimport useThemeProps from '../styles/useThemeProps';\r\nimport useForkRef from '../utils/useForkRef';\r\nimport { getSelectUtilityClasses } from './selectClasses';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\n\r\nconst useUtilityClasses = ownerState => {\r\n  const {\r\n    classes\r\n  } = ownerState;\r\n  const slots = {\r\n    root: ['root']\r\n  };\r\n  return composeClasses(slots, getSelectUtilityClasses, classes);\r\n};\r\n\r\nconst Select = /*#__PURE__*/React.forwardRef(function Select(inProps, ref) {\r\n  const props = useThemeProps({\r\n    name: 'MuiSelect',\r\n    props: inProps\r\n  });\r\n\r\n  const {\r\n    autoWidth = false,\r\n    children,\r\n    classes: classesProp = {},\r\n    className,\r\n    displayEmpty = false,\r\n    IconComponent = ArrowDropDownIcon,\r\n    id,\r\n    input,\r\n    inputProps,\r\n    label,\r\n    labelId,\r\n    MenuProps,\r\n    multiple = false,\r\n    native = false,\r\n    onClose,\r\n    onOpen,\r\n    open,\r\n    renderValue,\r\n    SelectDisplayProps,\r\n    variant: variantProps = 'outlined'\r\n  } = props,\r\n        other = _objectWithoutPropertiesLoose(props, _excluded);\r\n\r\n  const inputComponent = native ? NativeSelectInput : SelectInput;\r\n  const muiFormControl = useFormControl();\r\n  const fcs = formControlState({\r\n    props,\r\n    muiFormControl,\r\n    states: ['variant']\r\n  });\r\n  const variant = fcs.variant || variantProps;\r\n  const InputComponent = input || {\r\n    standard: _Input || (_Input = /*#__PURE__*/_jsx(Input, {})),\r\n    outlined: /*#__PURE__*/_jsx(OutlinedInput, {\r\n      label: label\r\n    }),\r\n    filled: _FilledInput || (_FilledInput = /*#__PURE__*/_jsx(FilledInput, {}))\r\n  }[variant];\r\n\r\n  const ownerState = _extends({}, props, {\r\n    classes: classesProp\r\n  });\r\n\r\n  const classes = useUtilityClasses(ownerState);\r\n\r\n  const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded2);\r\n\r\n  const inputComponentRef = useForkRef(ref, InputComponent.ref);\r\n  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({\r\n    // Most of the logic is implemented in `SelectInput`.\r\n    // The `Select` component is a simple API wrapper to expose something better to play with.\r\n    inputComponent,\r\n    inputProps: _extends({\r\n      children,\r\n      IconComponent,\r\n      variant,\r\n      type: undefined,\r\n      // We render a select. We can ignore the type provided by the `Input`.\r\n      multiple\r\n    }, native ? {\r\n      id\r\n    } : {\r\n      autoWidth,\r\n      displayEmpty,\r\n      labelId,\r\n      MenuProps,\r\n      onClose,\r\n      onOpen,\r\n      open,\r\n      renderValue,\r\n      SelectDisplayProps: _extends({\r\n        id\r\n      }, SelectDisplayProps)\r\n    }, inputProps, {\r\n      classes: inputProps ? deepmerge(otherClasses, inputProps.classes) : otherClasses\r\n    }, input ? input.props.inputProps : {})\r\n  }, multiple && native && variant === 'outlined' ? {\r\n    notched: true\r\n  } : {}, {\r\n    ref: inputComponentRef,\r\n    className: clsx(classes.root, InputComponent.props.className, className)\r\n  }, other));\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? Select.propTypes\r\n/* remove-proptypes */\r\n= {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\r\n  // ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * If `true`, the width of the popover will automatically be set according to the items inside the\r\n   * menu, otherwise it will be at least the width of the select input.\r\n   * @default false\r\n   */\r\n  autoWidth: PropTypes.bool,\r\n\r\n  /**\r\n   * The option elements to populate the select with.\r\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\r\n   *\r\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * @default {}\r\n   */\r\n  classes: PropTypes.object,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * The default value. Use when the component is not controlled.\r\n   */\r\n  defaultValue: PropTypes.any,\r\n\r\n  /**\r\n   * If `true`, a value is displayed even if no items are selected.\r\n   *\r\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\r\n   * returns the value to be displayed when no items are selected.\r\n   *\r\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\r\n   * The label should either be hidden or forced to a shrunk state.\r\n   * @default false\r\n   */\r\n  displayEmpty: PropTypes.bool,\r\n\r\n  /**\r\n   * The icon that displays the arrow.\r\n   * @default ArrowDropDownIcon\r\n   */\r\n  IconComponent: PropTypes.elementType,\r\n\r\n  /**\r\n   * The `id` of the wrapper element or the `select` element when `native`.\r\n   */\r\n  id: PropTypes.string,\r\n\r\n  /**\r\n   * An `Input` element; does not have to be a material-ui specific `Input`.\r\n   */\r\n  input: PropTypes.element,\r\n\r\n  /**\r\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\r\n   * When `native` is `true`, the attributes are applied on the `select` element.\r\n   */\r\n  inputProps: PropTypes.object,\r\n\r\n  /**\r\n   * See [OutlinedInput#label](/api/outlined-input/#props)\r\n   */\r\n  label: PropTypes.node,\r\n\r\n  /**\r\n   * The ID of an element that acts as an additional label. The Select will\r\n   * be labelled by the additional label and the selected value.\r\n   */\r\n  labelId: PropTypes.string,\r\n\r\n  /**\r\n   * Props applied to the [`Menu`](/api/menu/) element.\r\n   */\r\n  MenuProps: PropTypes.object,\r\n\r\n  /**\r\n   * If `true`, `value` must be an array and the menu will support multiple selections.\r\n   * @default false\r\n   */\r\n  multiple: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the component uses a native `select` element.\r\n   * @default false\r\n   */\r\n  native: PropTypes.bool,\r\n\r\n  /**\r\n   * Callback fired when a menu item is selected.\r\n   *\r\n   * @param {SelectChangeEvent<T>} event The event source of the callback.\r\n   * You can pull out the new value by accessing `event.target.value` (any).\r\n   * **Warning**: This is a generic event not a change event unless the change event is caused by browser autofill.\r\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\r\n   */\r\n  onChange: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the component requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   */\r\n  onClose: PropTypes.func,\r\n\r\n  /**\r\n   * Callback fired when the component requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   */\r\n  onOpen: PropTypes.func,\r\n\r\n  /**\r\n   * If `true`, the component is shown.\r\n   * You can only use it when the `native` prop is `false` (default).\r\n   */\r\n  open: PropTypes.bool,\r\n\r\n  /**\r\n   * Render the selected value.\r\n   * You can only use it when the `native` prop is `false` (default).\r\n   *\r\n   * @param {any} value The `value` provided to the component.\r\n   * @returns {ReactNode}\r\n   */\r\n  renderValue: PropTypes.func,\r\n\r\n  /**\r\n   * Props applied to the clickable div element.\r\n   */\r\n  SelectDisplayProps: PropTypes.object,\r\n\r\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\r\n  sx: PropTypes.object,\r\n\r\n  /**\r\n   * The `input` value. Providing an empty string will select no options.\r\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\r\n   *\r\n   * If the value is an object it must have reference equality with the option in order to be selected.\r\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\r\n   */\r\n  value: PropTypes.any,\r\n\r\n  /**\r\n   * The variant to use.\r\n   * @default 'outlined'\r\n   */\r\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\r\n} : void 0;\r\nSelect.muiName = 'Select';\r\nexport default Select;"]},"metadata":{},"sourceType":"module"}